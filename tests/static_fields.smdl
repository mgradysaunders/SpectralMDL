#smdl

struct Foo {
  // Static fields are visible in ordinary field initializers, even
  // if declared after the ordinary field. This is because the ordinary
  // field initializer is not invoked until an instance of the struct
  // is constructed.
  int v = 2 * bar - baz;

  // Static fields must have initializers that evaluate to compile-time
  // constants.
  static const int bar = 11;

  // Static field initializers may reference static fields declared 
  // above in the same struct.
  static const int baz = 3 * bar - 9;
};

unit_test "Static fields" {
  // Static fields may be accessed either thru instances of the 
  // struct or through the struct type itself
  auto foo = Foo();
  #assert(Foo.bar == 11);
  #assert(Foo.baz == 33 - 9);
  #assert(#typeof(foo) == Foo);
  #assert(#typeof(foo).bar == foo.bar);
  #assert(#typeof(foo).baz == foo.baz);
  #assert(foo.v == 22 - 33 + 9);

  // Static fields are not stored on instances of the struct
  // and therefore do not contribute to the `#sizeof(Foo)`
  #assert(#sizeof(Foo) == #sizeof(int));
}

