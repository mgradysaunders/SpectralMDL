#smdl

import ::math::*;

unit_test "Math" {
  #assert(math::abs(-7) == 7);
  #assert(math::abs(-7.1) == 7.1);
  #assert(math::isinf($INF) && !math::isnan($INF) && !math::isfinite($INF));
  #assert(math::isnan($NAN) && !math::isinf($NAN) && !math::isfinite($NAN));
  #assert(math::cos(math::acos(0.349)) ~== [1e-5] 0.349);
  #assert(math::sin(math::asin(0.715)) ~== [1e-5] 0.715);
  #assert(math::tan(math::atan(0.631)) ~== [1e-5] 0.631);
  #assert(math::atan2(math::sin(theta := 1.491), math::cos(theta)) ~== [1e-5] theta);
  #assert(math::cosh(+3.872) ~== [1e-5] 24.029591748);
  #assert(math::sinh(-1.299) ~== [1e-5] -1.69641237193);
  #assert(math::tanh(-2.137) ~== [1e-5] -0.972530602491);
  #assert(math::log(math::exp(0.617)) ~== [1e-5] 0.617);
  #assert(math::log2(math::exp2(0.617)) ~== [1e-5] 0.617);
  #assert(math::log10(math::exp10(0.617)) ~== [1e-5] 0.617);
  #assert(math::lerp(2.7, 8.1, 0.5) ~== [1e-5] 0.5 * (2.7 + 8.1));
  #assert(math::lerp(2.7, 8.1, 0.0) == 2.7);
  #assert(math::lerp(2.7, 8.1, 1.0) == 8.1);
  #assert(math::smoothstep(2.7, 8.1, 0.0) == 2.7);
  #assert(math::smoothstep(2.7, 8.1, 1.0) == 8.1);
  {
    auto tmp = math::sincos(0.411);
    #assert(tmp[0] ~== [1e-5] math::sin(0.411));
    #assert(tmp[1] ~== [1e-5] math::cos(0.411));
  }
  {
    auto tmp = math::modf(float2(-1.8, 11.7));
    #assert(#all(tmp[0] ~== [1e-5] float2(-1, 11)));
    #assert(#all(tmp[1] ~== [1e-5] float2(-0.8, 0.7)));
  }
  #assert(math::average(float4(3, 5, 7, 9)) ~== [1e-5] 6.0);
  #assert(math::average(1.25) == 1.25);
  #assert(math::min_value(float4(-0.1, -1.2, 4.7, 3.1)) == -1.2);
  #assert(math::max_value(float4(-0.1, -1.2, 4.7, 3.1)) == 4.7);
  {
    auto v = float3(1.5, -0.8, -1.3);
    #assert(math::length(math::normalize(v)) ~== [1e-5] 1.0);
    #assert(math::dot(v, math::normalize(v)) ~== [1e-5] math::length(v));
  }
  #assert(#all(math::cross(float3(1, 0, 0), float3(0, 1, 0)) == float3(0, 0, 1)));
  #assert(math::radians(45) ~== [1e-5] $PI / 4);
  #assert(math::degrees(math::radians(51.3)) ~== [1e-5] 51.3);
  if $($WAVELENGTH_BASE_MAX >= 2) {
    color c(0);
    c[0] = 0.617;
    c[1] = 0.243;
    float w(0.5 * ($state.wavelength_base[0] + $state.wavelength_base[1]));
    #assert(math::eval_at_wavelength(c, w) ~== [1e-5] 0.43);
  }
}
