#smdl

struct Foo {
  auto bar;
  auto baz;
};

unit_test "Void fields" {
  // Void-ing fields is legal!
  auto foo = Foo(bar: void(), baz: void());

  // Accessing these fields returns `void`.
  #assert(#typeof(foo.bar) == void);
  #assert(#typeof(foo.baz) == void);

  // However, in the struct layout, the fields reduce to 
  // 8-bit integers, so the memory addresses remain
  // unique.
  #assert(&foo.bar != &foo.baz);
}


