#smdl

import ::df::*;
import ::math::*;

@(pure) auto run_low_discrepancy_tests(auto xi) {
  auto xi_av(xi);
  for (int i = 0; i < 5000; i++) {
    xi_av += df::monte_carlo::next_low_discrepancy(&xi);
  }
  xi_av /= 5000;
  #assert(#all(xi_av ~== [1e-3] 0.5));
}

unit_test "Low discrepancy 2D" {
  run_low_discrepancy_tests(float2(0.1, 0.2));
}

unit_test "Low discrepancy 3D" {
  run_low_discrepancy_tests(float3(0.1, 0.2, 0.3));
}

unit_test "Low discrepancy 4D" {
  run_low_discrepancy_tests(float4(0.1, 0.2, 0.3, 0.4));
}

unit_test "Cosine-weighted hemisphere sample" {
  auto xi(float2(0.5, 0.7));
  auto wi_av(float3(0.0));
  for (int i = 0; i < 5000; i++, df::monte_carlo::next_low_discrepancy(&xi)) {
    wi_av += df::monte_carlo::cosine_hemisphere_sample(xi);
  }
  wi_av /= 5000;
  #assert(#all(wi_av ~== [1e-3] float3(0.0, 0.0, 0.666)));
}

unit_test "Erf inverse" {
  #assert(df::monte_carlo::erf_inverse(#erf(-1.1d)) ~== [1e-5d] -1.1d);
  #assert(df::monte_carlo::erf_inverse(#erf(-0.3d)) ~== [1e-5d] -0.3d);
  #assert(df::monte_carlo::erf_inverse(#erf(+1.2d)) ~== [1e-5d] +1.2d);
  #assert(df::monte_carlo::erf_inverse(#erf(+2.7d)) ~== [1e-5d] +2.7d);
}

unit_test "Half vector (reflection)" {
  const auto wo = math::normalize(float3(-0.4, 1.2, 1.6));
  const auto wi = math::normalize(float3(+0.1, -0.7, 0.4));
  const auto wm = math::normalize(df::specular::reflection_half_vector(wo, wi));
  #assert(#all(df::specular::reflect(wo, wm) ~== [1e-5] wi));
  #assert(#all(df::specular::reflect(wi, wm) ~== [1e-5] wo));
}

// TODO Verify microfacet::smith_slope_pdf is normalized for microfacet::distribution_ggx

// TODO Verify microfacet::smith_slope_pdf is normalized for microfacet::distribution_beckmann

// TODO Verify microfacet::smith_normal_pdf is normalized for microfacet::distribution_ggx

// TODO Verify microfacet::smith_normal_pdf is normalized for microfacet::distribution_beckmann
