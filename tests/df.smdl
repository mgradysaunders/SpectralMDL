#smdl

import ::df::*;
import ::math::*;

unit_test "Specular half vector for reflection" {
  const auto wo = math::normalize(float3(-0.4, 1.2, 1.6));
  const auto wi = math::normalize(float3(+0.1, -0.7, 0.4));
  const auto wm = math::normalize(df::specular::reflection_half_vector(wo, wi));
  #assert(#all(df::specular::reflect(wo, wm) ~== [1e-5] wi));
  #assert(#all(df::specular::reflect(wi, wm) ~== [1e-5] wo));
}

unit_test "Specular half vector for refraction" {
  const auto ior = 1 / 1.4;
  const auto wo = math::normalize(float3(-0.4, 1.2, 1.6));
  const auto wi = math::normalize(float3(+0.1, -0.7, -0.4));
  const auto wm = math::normalize(df::specular::refraction_half_vector(wo, wi, ior));
  #assert(#all(df::specular::refract(wo, wm, ior) ~== [1e-5] wi));
  #assert(#all(df::specular::refract(wi, wm, 1 / ior) ~== [1e-5] wo));
}

unit_test "Erf inverse" {
  #assert(df::monte_carlo::erf_inverse(#erf(-1.1d)) ~== [1e-5d] -1.1d);
  #assert(df::monte_carlo::erf_inverse(#erf(-0.3d)) ~== [1e-5d] -0.3d);
  #assert(df::monte_carlo::erf_inverse(#erf(+1.2d)) ~== [1e-5d] +1.2d);
  #assert(df::monte_carlo::erf_inverse(#erf(+2.7d)) ~== [1e-5d] +2.7d);
}

@(pure) auto run_low_discrepancy_tests(auto xi) {
  auto xi_av(xi);
  for (int i = 0; i < 5000; i++) {
    xi_av += df::monte_carlo::next_low_discrepancy(&xi);
  }
  xi_av /= 5000;
  #assert(#all(xi_av ~== [1e-3] 0.5));
}

unit_test "Low discrepancy 2D" {
  run_low_discrepancy_tests(float2(0.1, 0.2));
}

unit_test "Low discrepancy 3D" {
  run_low_discrepancy_tests(float3(0.1, 0.2, 0.3));
}

unit_test "Low discrepancy 4D" {
  run_low_discrepancy_tests(float4(0.1, 0.2, 0.3, 0.4));
}

unit_test "Cosine-weighted hemisphere sample" {
  auto xi(float2(0.5, 0.7));
  auto wi_av(float3(0.0));
  for (int i = 0; i < 5000; i++, df::monte_carlo::next_low_discrepancy(&xi)) {
    wi_av += df::monte_carlo::cosine_hemisphere_sample(xi);
  }
  wi_av /= 5000;
  #assert(#all(wi_av ~== [1e-3] float3(0.0, 0.0, 0.666)));
}
// Integrate Smith slope PDF by transforming the open square `(-1, 1)^2` 
// into the entire plane `(-inf, inf)^2`.
@(pure) float integrate_smith_slope_pdf(const df::microfacet::distribution distr) {
  double fsum = 0;
  const int n = 512;
  for (int ix = 0; ix < n; ix++) {
    const float tx = math::lerp(-0.99999, 0.99999, ix / float(n - 1));
    const float mx = tx / (1 - tx * tx);
    double ftmp = 0;
    for (int iy = 0; iy < n; iy++) {
      const float ty = math::lerp(-0.99999, 0.99999, iy / float(n - 1));
      const float my = ty / (1 - ty * ty);
      ftmp += 2 * (1 + ty * ty) / #pow(1 - ty * ty, 2) * df::microfacet::smith_slope_pdf(distr, float2(mx, my));
    }
    fsum += 2 * (1 + tx * tx) / #pow(1 - tx * tx, 2) * ftmp / n;
  }
  return fsum / n;
}

// Integrate Smith normal PDF by cosine-weighted hemisphere sampling.
@(pure) float integrate_smith_normal_pdf(const df::microfacet::distribution distr, const float2 alpha) {
  double fsum = 0;
  const int n = 512 * 512;
  float2 xi = float2(0.228, 0.712);
  for (int i = 0; i < n; i++, df::monte_carlo::next_low_discrepancy(&xi)) {
    fsum += df::microfacet::smith_normal_pdf(distr, alpha, df::monte_carlo::cosine_hemisphere_sample(xi));
  }
  return $PI * fsum / n;
}

unit_test "Microfacet distributions" {
  #assert(integrate_smith_slope_pdf(df::microfacet::distribution_ggx()) ~== [1e-2] 1.0);
  #assert(integrate_smith_slope_pdf(df::microfacet::distribution_beckmann()) ~== [1e-2] 1.0);
  #assert(integrate_smith_normal_pdf(df::microfacet::distribution_ggx(), float2(0.8, 1.2)) ~== [1e-2] 1.0);
  #assert(integrate_smith_normal_pdf(df::microfacet::distribution_beckmann(), float2(1.1, 0.7)) ~== [1e-2] 1.0);
}
