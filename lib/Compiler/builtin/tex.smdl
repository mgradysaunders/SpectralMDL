#smdl

import ::math::lerp;

export enum gamma_mode { gamma_default = 0, gamma_linear = 0, gamma_srgb = 1 };

@(pure macro) float4 apply_gamma(const int gamma, const float4 texel) = gamma == int(gamma_srgb) ? float4((texel * texel).xyz, texel.w) : texel;

@(pure macro) float3 apply_gamma(const int gamma, const float3 texel) = gamma == int(gamma_srgb) ? (texel * texel) : texel;

@(pure macro) float2 apply_gamma(const int gamma, const float2 texel) = gamma == int(gamma_srgb) ? (texel * texel) : texel;

@(pure macro) float apply_gamma(const int gamma, const float texel) = gamma == int(gamma_srgb) ? (texel * texel) : texel;

@(pure macro) int uv_tile_index(const texture_2d tex, const int2 uv_tile) {
  return -1 if (#any((uv_tile < 0) | (uv_tile >= tex.tile_count)));
  return uv_tile.y * tex.tile_count_u + uv_tile.x;
}

export @(pure macro) int width(const texture_2d tex, const int2 uv_tile = int2(0)) {
  const auto i(uv_tile_index(tex, uv_tile));
  return i < 0 ? 0 : tex.tile_extents[i].x;
}

// TODO int width(const texture_3d tex)

// TODO int width(const texture_cube tex)

export @(pure macro) int height(const texture_2d tex, const int2 uv_tile = int2(0)) {
  const auto i(uv_tile_index(tex, uv_tile));
  return i < 0 ? 0 : tex.tile_extents[i].y;
}

// TODO int height(const texture_3d tex)

// TODO int height(const texture_cube tex)

export @(pure macro) bool texture_isvalid(const texture_2d tex) = bool(tex.tile_buffers[0]);

// TODO bool texture_isvalid(const texture_3d tex)

// TODO bool texture_isvalid(const texture_cube tex)

export @(pure macro) bool texture_isvalid(const texture_ptex tex) = bool(tex.handle);

@(pure) auto texel_fetch(const texture_2d tex, const int2 coord, const int2 uv_tile = int2(0)) {
  const auto i(uv_tile_index(tex, uv_tile));
  return tex.texel_type(0) if (i < 0);
  const auto tile_extent(tex.tile_extents[i]);
  const auto tile_buffer(tex.tile_buffers[i]);
  return tex.texel_type(0) if (!tile_buffer | #any((coord < 0) | (coord >= tile_extent)));
  return tile_buffer[coord.y * tile_extent.x + coord.x];
}

export @(pure macro) float4 texel_float4(const texture_2d tex, const int2 coord, const int2 uv_tile = int2(0)) {
  return apply_gamma(tex.gamma, #unpack_float4(texel_fetch(tex, coord, uv_tile)));
}

export @(pure macro) float3 texel_float3(const texture_2d tex, const int2 coord, const int2 uv_tile = int2(0)) {
  return apply_gamma(tex.gamma, #unpack_float4(texel_fetch(tex, coord, uv_tile)).xyz);
}

export @(pure macro) float2 texel_float2(const texture_2d tex, const int2 coord, const int2 uv_tile = int2(0)) {
  return apply_gamma(tex.gamma, #unpack_float4(texel_fetch(tex, coord, uv_tile)).xy);
}

export @(pure macro) float texel_float(const texture_2d tex, const int2 coord, const int2 uv_tile = int2(0)) {
  return apply_gamma(tex.gamma, #unpack_float4(texel_fetch(tex, coord, uv_tile)).x);
}

export @(pure macro) color texel_color(const texture_2d tex, const int2 coord, const int2 uv_tile = int2(0)) {
  return color(texel_float3(tex, coord, uv_tile));
}

export enum wrap_mode { wrap_clamp = 0, wrap_repeat = 1, wrap_mirrored_repeat = 2, wrap_clip = 3 };

@(pure macro) auto apply_wrap(const auto wrap, const auto n, auto i) {
  auto rem(i % n);
  const auto neg(#select(rem < 0, 1, 0));
  rem += n * neg;
  const auto quo(i / n + neg);
  const auto repeat(rem);
  const auto mirror(#select((quo & 1) == 1, n - 1 - rem, rem));
  i = #select(wrap == 0, i, #select(wrap == 1, repeat, mirror));
  i = #max(0, #min(i, n - 1));
  return i;
}

export @(pure) float4 lookup_float4(
  const texture_2d tex,
  float2 coord,
  const wrap_mode wrap_u = wrap_repeat,
  const wrap_mode wrap_v = wrap_repeat,
  const float2 crop_u = float2(0.0, 1.0),
  const float2 crop_v = float2(0.0, 1.0),
) {
  if ((tex.tile_count_u > 1) | (tex.tile_count_v > 1)) {
    // MDL specification:
    // The wrap mode and crop parameters are ignored if the texture references a uv-tileset. In this case,
    // floor(coord) defines the index to select the tile in the uv-tileset and coord-floor(coord) defines the
    // uv coordinates to look up the sampled texture value in the normalized texture space in the range [0,1)^2
    // for the selected tile.
    const int2 tile_index(#floor(coord));
    const auto i(uv_tile_index(tex, tile_index));
    return float4(0) if (i < 0);
    const auto tile_extent(tex.tile_extents[i]);
    const auto tile_buffer(tex.tile_buffers[i]);
    return float4(0) if (!tile_buffer);
    coord -= tile_index;
    coord *= tile_extent;
    coord -= 0.5;
    const int2 ic(#floor(coord));
    const int2 ic0(#min(ic, tile_extent - 1));
    const int2 ic1(#min(ic + 1, tile_extent - 1));
    coord -= ic;
    return apply_gamma(
      tex.gamma,
      math::lerp(math::lerp(#unpack_float4(tile_buffer[ic0.x + tile_extent.x * ic0.y]),           //
                            #unpack_float4(tile_buffer[ic1.x + tile_extent.x * ic0.y]), coord.x), //
                 math::lerp(#unpack_float4(tile_buffer[ic0.x + tile_extent.x * ic1.y]),           //
                            #unpack_float4(tile_buffer[ic1.x + tile_extent.x * ic1.y]), coord.x), coord.y),
    );
  } else {
    const auto i(uv_tile_index(tex, int2(0)));
    return float4(0) if (i < 0);
    const auto tile_extent(tex.tile_extents[i]);
    const auto tile_buffer(tex.tile_buffers[i]);
    return float4(0) if (!tile_buffer);
    const auto icrop_u(int2(crop_u * tile_extent));
    const auto icrop_v(int2(crop_v * tile_extent));
    const auto icorner0(int2(icrop_u[0], icrop_v[0]));
    const auto icorner1(int2(icrop_u[1], icrop_v[1]));
    const auto subextent(icorner1 - icorner0);
    coord *= subextent;
    coord -= 0.5;
    const int2 wrap(int(wrap_u), int(wrap_v));
    const int2 ic(#floor(coord));
    const auto ic0(icorner0 + apply_wrap(wrap, subextent, ic));
    const auto ic1(icorner0 + apply_wrap(wrap, subextent, ic + 1));
    coord -= ic;
    return apply_gamma(
      tex.gamma,
      math::lerp(math::lerp(#unpack_float4(tile_buffer[ic0.x + tile_extent.x * ic0.y]),           //
                            #unpack_float4(tile_buffer[ic1.x + tile_extent.x * ic0.y]), coord.x), //
                 math::lerp(#unpack_float4(tile_buffer[ic0.x + tile_extent.x * ic1.y]),           //
                            #unpack_float4(tile_buffer[ic1.x + tile_extent.x * ic1.y]), coord.x), coord.y),
    );
  }
}

export @(pure macro) float3 lookup_float3(
  const texture_2d tex,
  const float2 coord,
  const wrap_mode wrap_u = wrap_repeat,
  const wrap_mode wrap_v = wrap_repeat,
  const float2 crop_u = float2(0.0, 1.0),
  const float2 crop_v = float2(0.0, 1.0),
) = lookup_float4(tex, coord, wrap_u, wrap_v, crop_u, crop_v).xyz;

export @(pure macro) float2 lookup_float2(
  const texture_2d tex,
  const float2 coord,
  const wrap_mode wrap_u = wrap_repeat,
  const wrap_mode wrap_v = wrap_repeat,
  const float2 crop_u = float2(0.0, 1.0),
  const float2 crop_v = float2(0.0, 1.0),
) = lookup_float4(tex, coord, wrap_u, wrap_v, crop_u, crop_v).xy;

export @(pure macro) float lookup_float(
  const texture_2d tex,
  const float2 coord,
  const wrap_mode wrap_u = wrap_repeat,
  const wrap_mode wrap_v = wrap_repeat,
  const float2 crop_u = float2(0.0, 1.0),
  const float2 crop_v = float2(0.0, 1.0),
) = lookup_float4(tex, coord, wrap_u, wrap_v, crop_u, crop_v).x;

export @(pure macro) color lookup_color(
  const texture_2d tex,
  const float2 coord,
  const wrap_mode wrap_u = wrap_repeat,
  const wrap_mode wrap_v = wrap_repeat,
  const float2 crop_u = float2(0.0, 1.0),
  const float2 crop_v = float2(0.0, 1.0),
) = color(lookup_float4(tex, coord, wrap_u, wrap_v, crop_u, crop_v).xyz);

@(foreign) void smdl_ptex_evaluate(
  &void tex,
  int gamma,
  int first,
  int num,
  &float result,
);

export @(macro) float4 lookup_float4(const texture_ptex tex, const int channel = 0) {
  float4 result;
  smdl_ptex_evaluate(tex.handle, tex.gamma, channel, 4, &result[0]);
  return result;
}

export @(macro) float3 lookup_float3(const texture_ptex tex, const int channel = 0) {
  float3 result;
  smdl_ptex_evaluate(tex.handle, tex.gamma, channel, 3, &result[0]);
  return result;
}

export @(macro) float2 lookup_float2(const texture_ptex tex, const int channel = 0) {
  float2 result;
  smdl_ptex_evaluate(tex.handle, tex.gamma, channel, 2, &result[0]);
  return result;
}

export @(macro) float lookup_float(const texture_ptex tex, const int channel = 0) {
  float result;
  smdl_ptex_evaluate(tex.handle, tex.gamma, channel, 1, &result);
  return result;
}

export @(macro) color lookup_color(const texture_ptex tex, const int channel = 0) {
  float3 result;
  smdl_ptex_evaluate(tex.handle, tex.gamma, channel, 3, &result[0]);
  return color(result);
}
