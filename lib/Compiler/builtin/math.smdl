#smdl

export const float PI = $PI;

export const float TWO_PI = $TWO_PI;

export const float HALF_PI = $HALF_PI;

export @(pure macro) auto abs(const auto a) = #abs(a);

export @(pure macro) auto all(const auto a) = #all(a);

export @(pure macro) auto any(const auto a) = #any(a);

export @(pure macro) auto max(const auto a, const auto b) = #max(a, b);

export @(pure macro) auto min(const auto a, const auto b) = #min(a, b);

export @(pure macro) auto clamp(const auto a, const auto min, const auto max) = #max(min, #min(a, max));

export @(pure macro) auto saturate(const auto a) = clamp(a, 0.0, 1.0);

export @(pure macro) auto floor(const auto a) = #floor(a);

export @(pure macro) auto ceil(const auto a) = #ceil(a);

export @(pure macro) auto round(const auto a) = #round(a);

export @(pure macro) auto trunc(const auto a) = #trunc(a);

export @(pure macro) auto frac(const auto a) = a - #floor(a);

export @(pure macro) auto fmod(const auto a, const auto b) = a % b;

// TODO modf

export @(pure macro) auto isfinite(const auto a) = #isfpclass(a, 0b0111111000);

export @(pure macro) auto isnormal(const auto a) = #isfpclass(a, 0b0100001000);

export @(pure macro) auto isinf(const auto a) = #isfpclass(a, 0b1000000100);

export @(pure macro) auto isnan(const auto a) = #isfpclass(a, 0b0000000011);

export @(pure macro) auto sign(const auto a) = #sign(a);

export @(pure macro) auto sqrt(const auto a) = #sqrt(a);

export @(pure macro) auto rsqrt(const auto a) = 1.0 / #sqrt(a);

export @(pure macro) auto pow(const auto a, const auto b) = #pow(a, b);

export @(pure macro) auto cos(const auto a) = #cos(a);

export @(pure macro) auto sin(const auto a) = #sin(a);

export @(pure macro) auto tan(const auto a) = #tan(a);

export @(pure macro) auto acos(const auto a) = #acos(a);

export @(pure macro) auto asin(const auto a) = #asin(a);

export @(pure macro) auto atan(const auto a) = #atan(a);

export @(pure macro) auto atan2(const auto y, const auto x) = #atan2(y, x);

export @(pure macro) auto cosh(const auto a) = #cosh(a);

export @(pure macro) auto sinh(const auto a) = #sinh(a);

export @(pure macro) auto tanh(const auto a) = #tanh(a);

export @(pure macro) auto sincos(const auto a) = auto[2](#sin(a), #cos(a));

export @(pure macro) auto radians(const auto a) = a * (PI / 180.0);

export @(pure macro) auto degrees(const auto a) = a * (180.0 / PI);

export @(pure macro) auto exp(const auto a) = #exp(a);

export @(pure macro) auto exp2(const auto a) = #exp2(a);

export @(pure macro) auto exp10(const auto a) = #exp10(a);

export @(pure macro) auto log(const auto a) = #log(a);

export @(pure macro) auto log2(const auto a) = #log2(a);

export @(pure macro) auto log10(const auto a) = #log10(a);

export @(pure macro) auto min_value(const auto a) = #min_value(a);

export @(pure macro) auto max_value(const auto a) = #max_value(a);

// TODO min_value_wavelength

// TODO max_value_wavelength

export @(pure macro) auto average(const auto a) = #sum(a) / a.size;

export @(pure macro) auto lerp(const auto a, const auto b, const auto l) = (1.0 - l) * a + l * b;

export @(pure macro) auto step(const auto a, const auto b) = #select(b < a, 0.0, 1.0);

export @(pure macro) auto smoothstep(const auto a, const auto b, const auto l) {
  const auto t(saturate(l));
  const auto s(1 - t);
  return s * s * (1 + 2 * t) * a + t * t * (1 + 2 * s) * b;
}

export @(pure macro) auto dot(const auto a, const auto b) = #sum(a * b);

export @(pure macro) auto length(const auto a) = #sqrt(#sum(a * a));

export @(pure macro) auto normalize(const auto a) = a * (1 / length(a));

export @(pure macro) auto distance(const auto a, const auto b) = length(b - a);

export @(pure macro) auto cross(const auto a, const auto b) = a.yzx * b.zxy - a.zxy * b.yzx;

export @(pure macro) auto transpose(const auto a) = #transpose(a);

// The implementation below is a series expansion of this calculation:
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// const auto t(color($state.wavelength_base) * temperature);
// const auto numer(#pow(2897.7719e3 / t, 5));
// const auto denom(#exp(14.387773e6 / t) - 1.0);
// return 142.3251316 * numer / denom;
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// At 16 wavelengths, the series expansion is around 2x faster. For more
// wavelengths, the performance difference only becomes more exaggerated.
export @(noinline) color blackbody(const float temperature) {
  const auto t(color($state.wavelength_base) * (temperature / 14.387e6));
  auto res(1 + 2 * t);
  res = 1 + 3 * t * res;
  res = 1 + 4 * t * res;
  res = 1 + 5 * t * res;
  const auto rcp1(1 / t);
  auto rcp(rcp1 / 6);
  for (int k = 1; k < 10; ++k) {
    res += rcp;
    rcp *= rcp1 / (6 + k);
  }
  return 5.659994086 / res;
}

export @(noinline) float luminance(const color a) {
  float result(0.0);
  for (int i = 0; i < $WAVELENGTH_BASE_MAX; ++i) {
    result += $wyman_y($state.wavelength_base[i]) * a[i];
  }
  return result / $WAVELENGTH_BASE_MAX;
}

// NOTE: Non-standard! Used internally to implement df
export namespace monte_carlo {

export @(pure macro) float2 advance_low_discrepancy(const &float2 xi) = (*xi = frac(*xi + float2(0.75487766, 0.56984029)));

export @(pure macro) float3 advance_low_discrepancy(const &float3 xi) = (*xi = frac(*xi + float3(0.81917251, 0.67104360, 0.54970047)));

export @(pure macro) float4 advance_low_discrepancy(const &float4 xi) = (*xi = frac(*xi + float4(0.85667488, 0.73389185, 0.62870672, 0.53859725)));

export @(pure) bool bool_sample(const &float xi, const float chance) {
  if (*xi < chance) {
    *xi = (*xi / chance);
    return true;
  } else {
    *xi = (*xi - chance) / (1 - chance);
    return false;
  }
}

export @(pure) int uniform_wavelength_index_sample(const &float xi) {
  const int i(#min(int(*xi *= $WAVELENGTH_BASE_MAX), $WAVELENGTH_BASE_MAX - 1));
  *xi -= i;
  return i;
}

export @(pure noinline) float2 uniform_disk_sample(float2 xi) {
  xi = 2 * xi - 1;
  xi = #select(xi == 0, 1e-5, xi);
  const bool cond((absxi := #abs(xi), absxi.x > absxi.y));
  const float rad(#select(cond, xi.x, xi.y));
  const float phi(#select(cond, ($PI / 4) * xi.y / xi.x, ($PI / 2) - ($PI / 4) * xi.x / xi.y));
  return rad * float2(#cos(phi), #sin(phi));
}

export @(pure noinline) float3 cosine_hemisphere_sample(float2 xi) = float3((p := uniform_disk_sample(xi)), #sqrt(#max(1 - #sum(p * p), 0)));

} // namespace monte_carlo

// NOTE: Non-standard! Used internally to implement df
export namespace specular {

export @(pure macro) auto reflect(const float3 wi, const float3 wm) = 2 * #sum(wi * wm) * wm - wi;

export @(pure macro) auto refract(const float3 wi, const float3 wm, const float ior) {
  const auto cos_thetai(#sum(wi * wm));
  const auto cos2_thetai(#min(cos_thetai * cos_thetai, 1));
  const auto cos2_thetat(#max(1 - ior * ior * (1 - cos2_thetai), 0));
  const auto cos_thetat(#sqrt(cos2_thetat) * -#sign(cos_thetai));
  return -ior * wi + (ior * cos_thetai + cos_thetat) * wm;
}

export @(pure macro) auto refraction_half_vector(
  const float3 wo,
  const float3 wi,
  const float ior,
) = (vh := -ior * wo + wi) * #sign(vh.z);

export @(pure macro) auto refraction_half_vector_jacobian(
  const float3 wo,
  const float3 wi,
  const float ior,
) = #abs(#sum(wi * (vh := refraction_half_vector(wo, wi, ior)))) / ((vh2 := #sum(vh * vh)) * #sqrt(vh2));

export @(pure macro) auto schlick_F0(const auto ior) = #pow((ior - 1) / (ior + 1), 2);

export @(pure macro) auto schlick_fresnel(
  const auto cos_theta,
  const auto F0,
  const auto F90 = 1.0,
  const float exponent = 5,
) = F0 + (F90 - F0) * #pow(#max(1 - #abs(cos_theta), 0), exponent);

export @(pure) auto dielectric_fresnel(const float cos_thetai, const auto ior) {
  const auto cos2_thetat(1 - ior * ior * (1 - cos_thetai * cos_thetai));
  const auto cos_thetat(#sqrt(#max(cos2_thetat, 0)) * #sign(cos_thetai));
  const auto rs((ior * cos_thetai - cos_thetat) / (ior * cos_thetai + cos_thetat));
  const auto rp((cos_thetai - ior * cos_thetat) / (cos_thetai + ior * cos_thetat));
  return #min(0.5 * (rs * rs + rp * rp), 1.0);
}

} // namespace specular
