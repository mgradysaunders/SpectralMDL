// vim:foldmethod=marker:foldlevel=0:fmr=--{,--}
#smdl

using ::math import *;

export enum scatter_mode { scatter_none = 0, scatter_reflect = 1, scatter_transmit = 2, scatter_reflect_transmit = 3 };

/// Calculate the chance of reflection.
@(pure macro) float scatter_reflect_chance(const scatter_mode mode) {
  const auto refl_weight(#select((int(mode) & 1) != 0, 1.0, 0.0));
  const auto tran_weight(#select((int(mode) & 2) != 0, 1.0, 0.0));
  return refl_weight / (refl_weight + tran_weight);
}

/// Calculate the orthogonal right-handed tangent space from the 
/// given normal and tangent vectors.
@(pure noinline) float3x3 build_tangent_space(const float3 normal, const float3 tangent_u) {
  const auto tw(normalize(normal) * #sign(normal.z));
  const auto tu(normalize(tangent_u - dot(tangent_u, tw) * tw));
  const auto tv(normalize(cross(tw, tu)));
  return float3x3(tu, tv, tw);
}

/// An arbitrary epsilon for stabilizing scattering calculations.
const float SCATTER_EPS = 0.001;

struct scatter_evaluate_parameters {
  /// The reference outgoing direction in the natural tangent space.
  float3 wo0;

  /// The reference incoming direction in the natural tangent space.
  float3 wi0;

  /// The reference mode. 
  scatter_mode mode = (wo0.z < 0) == (wi0.z < 0) ? scatter_reflect : scatter_transmit;

  /// Hit backface?
  bool hit_backface = wo0.z < 0;

  /// Is thin walled?
  bool thin_walled = false;

  /// The relative upper-to-lower index of refraction.
  float ior = 1 / 1.4;

  /// The normal direction.
  float3 normal = float3(0, 0, 1);

  /// The tangent direction.
  float3 tangent_u = float3(1, 0, 0);

  /// The outgoing direction.
  float3 wo = wo0;

  /// The incoming direction.
  float3 wi = wi0;

  finalize {
    // If we hit the backface, flip everything so that `wo` 
    // is always in the upper hemisphere.
    if (hit_backface) {
      wo0 = -wo0;
      wi0 = -wi0;
      wo = -wo;
      wi = -wi;
      ior = 1 / ior;
    }
  }
};

@(pure noinline) bool recalculate_tangent_space(inline const &scatter_evaluate_parameters params) {
  auto tbn(build_tangent_space(normal, tangent_u));
  wo = wo0 * tbn;
  wi = wi0 * tbn;
  return ((wo.z < 0) == (wo0.z < 0)) & ((wi.z < 0) == (wi0.z < 0));
}

@(pure) float3 half_direction(inline const &scatter_evaluate_parameters params) {
  return normalize(mode == scatter_reflect ? wo + wi : specular::refraction_half_vector(wo, wi, ior));
}

struct scatter_evaluate_result {
  /// The Bidirectional Scattering Distribution Function (BSDF) evaluation.
  $(color | float) f = 0.0;

  /// The Probability Density Function (PDF) evaluations.
  /// - `pdf[0]` is the forward density of sampling `wi` given `wo`.
  /// - `pdf[1]` is the reverse density of sampling `wo` given `wi`.
  float2 pdf = float2(0.0);

  /// Is known to be black by construction? Faster than checking every 
  /// element of `f`!
  bool is_black = false;
};

struct scatter_sample_parameters {
  /// The primary outgoing direction in the natural geometric tangent space.
  float3 wo0;

  /// Hit backface?
  bool hit_backface = wo0.z < 0;

  /// Is thin walled?
  bool thin_walled = false;

  /// The active index of refraction.
  float ior = 1 / 1.4;

  /// The active normal direction.
  float3 normal = float3(0, 0, 1);

  /// The active tangent direction.
  float3 tangent_u = float3(1, 0, 0);

  /// The active outgoing direction (expanded in the active tangent space).
  float3 wo = wo0;

  /// The canonical random sample in [0,1]^4. 
  float4 xi;

  finalize {
    // If we hit the backface, flip everything so that `wo` 
    // is always in the upper hemisphere.
    if (hit_backface) {
      wo0 = -wo0;
      wo = -wo;
      ior = 1 / ior;
    }
  }
};

@(pure noinline) ?float3x3 recalculate_tangent_space(inline const &scatter_sample_parameters params) {
  auto tbn(build_tangent_space(normal, tangent_u));
  wo = wo0 * tbn;
  return tbn if ((wo.z < 0) == (wo0.z < 0));
}

struct scatter_sample_result {
  /// The sampled incoming direction.
  float3 wi = float3(0.0);

  /// The sampled scatter mode.
  scatter_mode mode = scatter_none;

  /// If sampled from a directional delta distribution, the BSDF evaluation (which is otherwise unevaluable).
  ?color delta_f = void();
};

//--{ default_bsdf
@(pure macro) auto scatter_evaluate(const &$default_bsdf this, const &scatter_evaluate_parameters params) {
  return scatter_evaluate_result(is_black: true);
}

@(pure macro) auto scatter_sample(const &$default_bsdf this, const &scatter_sample_parameters params) {
  return scatter_sample_result();
}
//--}

//--{ diffuse_reflection_bsdf
export struct diffuse_reflection_bsdf: bsdf {
  /// The tint.
  $(color | float) tint = 1.0;

  /// The roughness.
  float roughness = 0.0;

  /// The handle.
  string handle = "";
};

@(pure) auto scatter_evaluate(inline const &diffuse_reflection_bsdf this, inline const &scatter_evaluate_parameters params) {
  if (mode == scatter_reflect && recalculate_tangent_space(params)) {
    const auto cos_theta(#abs(auto(wi.z, wo.z)));
    const auto pdf(cos_theta / $PI);
    if (roughness == 0) {
      return scatter_evaluate_result(f: pdf[0] * tint, pdf: pdf);
    } else {
      // Oren-Nayar terms.
      const auto sigma2(2.0 * roughness * roughness);
      const auto A(1.00 - sigma2 / (2.0 * sigma2 + 0.66));
      const auto B(0.45 * sigma2 / (sigma2 + 0.09));
      const auto fac(#max(#sum(wo.xy * wi.xy), 0) / #max_value(cos_theta));
      return scatter_evaluate_result(f: pdf[0] * (A + fac * B) * tint, pdf: pdf);
    }
  } else {
    return scatter_evaluate_result(is_black: true);
  }
}

@(pure) auto scatter_sample(inline const &diffuse_reflection_bsdf this, inline const &scatter_sample_parameters params) {
  if ((tbn := recalculate_tangent_space(params))) {
    return scatter_sample_result(wi: (*tbn) * monte_carlo::cosine_hemisphere_sample(xi.xy), mode: scatter_reflect);
  } else {
    return scatter_sample_result(); // Reject
  }
}
//--}

//--{ diffuse_transmission_bsdf
export struct diffuse_transmission_bsdf: bsdf {
  /// The tint.
  $(color | float) tint = 1.0;

  /// The handle.
  string handle = "";
};

@(pure) auto scatter_evaluate(inline const &diffuse_transmission_bsdf this, inline const &scatter_evaluate_parameters params) {
  if (mode == scatter_transmit && recalculate_tangent_space(params)) {
    const auto cos_theta(#abs(auto(wi.z, wo.z)));
    const auto pdf(cos_theta / $PI);
    return scatter_evaluate_result(f: tint * pdf[0], pdf: pdf);
  } else {
    return scatter_evaluate_result(is_black: true);
  }
}

@(pure) auto scatter_sample(inline const &diffuse_transmission_bsdf this, inline const &scatter_sample_parameters params) {
  if ((tbn := recalculate_tangent_space(params))) {
    return scatter_sample_result(wi: (*tbn) * -monte_carlo::cosine_hemisphere_sample(xi.xy), mode: scatter_transmit);
  } else {
    return scatter_sample_result(); // Reject
  }
}
//--}

//--{ sheen_bsdf
export struct sheen_bsdf: bsdf {
  /// The roughness.
  float roughness;

  /// The tint.
  $(color | float) tint = 1.0;

  /// The multiscatter tint.
  $(color | float | void) multiscatter_tint = void();

  /// The multiscatter lobe. Unused, but I think this part of the later MDL spec?
  void multiscatter = void();

  /// The handle.
  string handle = "";

  finalize {
    roughness = saturate(roughness);
  }
};

@(pure) float sheen_lambda_l(const auto fit, const float mu) = fit[0] / (1.0 + fit[1] * #pow(mu, fit[2])) + fit[3] * mu + fit[4];

@(pure) float sheen_lambda(const auto fit, const float mu) = #exp(mu < 0.5 ? sheen_lambda_l(fit, mu) : 2 * sheen_lambda_l(fit, 0.5) - sheen_lambda_l(fit, #max(1 - mu, 0)));

@(pure) auto scatter_evaluate(inline const &sheen_bsdf this, inline const &scatter_evaluate_parameters params) {
  if (mode == scatter_reflect && recalculate_tangent_space(params)) {
    const auto cos_thetao(#abs(wo.z));
    const auto cos_thetai(#abs(wi.z));
    const auto pdf(float2(cos_thetai, cos_thetao) / $PI);
    const auto fss = let {
      const auto alpha(lerp(0.1, 1.0, roughness * roughness));
      const auto fit = lerp(
        auto(21.5473, 3.82987, 0.19823, -1.97760, -4.32054),
        auto(25.3245, 3.32435, 0.16801, -1.27393, -4.85967),
        (1 - alpha) * (1 - alpha),
      );
      const auto cos_thetah(normalize(wo + wi).z);
      const auto sin_thetah(#sqrt(1 - cos_thetah * cos_thetah + SCATTER_EPS));
      const auto D(1 / $TWO_PI * (2 + 1 / alpha) * #pow(sin_thetah, 1 / alpha));
      const auto G(1 / (1 + sheen_lambda(fit, cos_thetao) + sheen_lambda(fit, cos_thetai)));
    } in D * G / (4 * cos_thetao + SCATTER_EPS);
    return scatter_evaluate_result(f: tint * fss, pdf: pdf);
  } else {
    return scatter_evaluate_result(is_black: true);
  }
}

@(pure) auto scatter_sample(inline const &sheen_bsdf this, inline const &scatter_sample_parameters params) {
  if ((tbn := recalculate_tangent_space(params))) {
    return scatter_sample_result(wi: (*tbn) * monte_carlo::cosine_hemisphere_sample(xi.xy), mode: scatter_reflect);
  } else {
    return scatter_sample_result(); // Reject
  }
}
//--}

//--{ ward_geisler_moroder_bsdf 
export struct ward_geisler_moroder_bsdf: bsdf {
  /// The roughness in U.
  float roughness_u;

  /// The roughness in V.
  float roughness_v = roughness_u;

  /// The tint.
  $(color | float) tint = 1.0;

  /// The multiscatter tint, or `void` for no multiscatter.
  $(color | float | void) multiscatter_tint = void();

  /// The tangent in U.
  float3 tangent_u = $state.texture_tangent_u[0];

  /// The handle.
  string handle = "";

  finalize {
    roughness_u = saturate(roughness_u);
    roughness_v = saturate(roughness_v);
  }
};

@(pure noinline) auto scatter_evaluate(const &ward_geisler_moroder_bsdf this, inline const &scatter_evaluate_parameters params) {
  preserve tangent_u;
  tangent_u = this.tangent_u;
  if (mode == scatter_reflect && recalculate_tangent_space(params)) {
    const auto cos_thetao(#abs(wo.z));
    const auto cos_thetai(#abs(wi.z));
    const auto roughness(this.roughness_u, this.roughness_v);
    const auto alpha(#max(0.001, roughness * roughness));
    const auto f(#sum((h := wo + wi) * h) / ($PI * alpha.x * alpha.y * #pow(h.z, 4)) * #exp(-#sum((g := h.xy / (h.z * alpha)) * g)));
    // Single-scattering.
    const auto fss_pdf(float2(f * (cos_thetao + cos_thetai) / 2));
    const auto fss(f * cos_thetai);
    if $(#typeof(this.multiscatter_tint) == void) {
      return scatter_evaluate_result(f: this.tint * fss, pdf: fss_pdf);
    } else {
      // Multiple-scattering.
      const auto fms_pdf(float2(cos_thetai, cos_thetao) / $PI);
      const auto fms = let {
        const auto r0(#sqrt(roughness.x * roughness.y));
        const auto fit = return_from {
          // Parallel evaluation of 3 different 8th-order polynomials
          // fit[0] = 1st coefficient in directional albedo fit
          // fit[1] = 2nd coefficient in directional albedo fit
          // fit[2] = Average albedo
          float3 fit(-1.1992005e+02, -1.4040313e+01, +7.8306640e-01);
          fit = fit * r0 + float3(+4.1985368e+02, +4.6807753e+01, -1.6213743e+00);
          fit = fit * r0 + float3(-5.8448171e+02, -6.1370147e+01, -1.3797964e+00);
          fit = fit * r0 + float3(+4.2351783e+02, +4.1399258e+01, +5.6539624e+00);
          fit = fit * r0 + float3(-1.6959530e+02, -1.4979874e+01, -3.8064856e+00);
          fit = fit * r0 + float3(+3.7025769e+01, +3.0665596e+00, -1.2666234e-01);
          fit = fit * r0 + float3(-3.4191809e+00, -2.9108604e-01, -1.8175253e-02);
          fit = fit * r0 + float3(+1.6044891e-01, +8.8001559e-03, +1.4868175e-03);
          fit = fit * r0 + float3(-7.1467185e-04, +1.8095055e-01, +9.9998607e-01);
          return fit;
        };
        const auto Ewo(#min(1 - fit[1] * (t := #pow(cos_thetao / fit[0], 2.0 / 3.0)) * #exp(1 - t), 0.999));
        const auto Ewi(#min(1 - fit[1] * (t := #pow(cos_thetai / fit[0], 2.0 / 3.0)) * #exp(1 - t), 0.999));
        const auto Eav(#min(fit[2], 0.999));
      } in (1 - Ewo) * (1 - Ewi) / (1 - Eav) * cos_thetai / $PI;
      return scatter_evaluate_result(f: this.tint * (fss + this.multiscatter_tint * fms), pdf: 0.8 * fss_pdf + 0.2 * fms_pdf);
    }
  } else {
    return scatter_evaluate_result(is_black: true);
  }
}

@(pure noinline) auto scatter_sample(const &ward_geisler_moroder_bsdf this, inline const &scatter_sample_parameters params) {
  preserve tangent_u;
  tangent_u = this.tangent_u;
  if ((tbn := recalculate_tangent_space(params))) {
    // Sample diffuse (20% chance if multiscattering)
    if (#typeof(this.multiscatter_tint) != void && monte_carlo::bool_sample(&xi.w, 0.2)) {
      return scatter_sample_result(wi: (*tbn) * monte_carlo::cosine_hemisphere_sample(xi.xy), mode: scatter_reflect);
    }
    // Sample specular.
    const auto roughness(this.roughness_u, this.roughness_v);
    const auto alpha(#max(0.001, roughness * roughness));
    const auto phi(#atan2(alpha.y * #sin(t := $TWO_PI * xi.x), alpha.x * #cos(t)));
    const auto cos_phi(#cos(phi));
    const auto sin_phi(#sin(phi));
    const auto theta(#atan(#sqrt(-#log(1 - xi.y) / (#pow(cos_phi / alpha.x, 2) + #pow(sin_phi / alpha.y, 2)))));
    const auto wm(float3(#sin(theta) * float2(cos_phi, sin_phi), #cos(theta)));
    const auto wi(normalize(specular::reflect(wo, wm)));
    if (wi.z > 0) {
      return scatter_sample_result(wi: (*tbn) * wi, mode: scatter_reflect);
    }
  }
  return scatter_sample_result();
}
//--}

//--{ tint
/// A 1-value tint.
struct tint1: bsdf, edf, hair_bsdf {
  /// The tint multiplier.
  $(color | float) tint;

  /// The base `bsdf`, `edf`, or `hair_bsdf`.
  auto base;
};

/// A 2-value tint.
struct tint2: bsdf {
  /// The tint multiplier on reflection.
  $(color | float) reflection_tint;

  /// The tint multiplier on transmission.
  $(color | float) transmission_tint;

  /// The base `bsdf`.
  bsdf base;
};

/// Construct 1-value tint of the given `bsdf`.
export @(pure macro) auto tint(const auto tint, const bsdf base) = tint1(tint, base);

/// Construct 1-value tint of the given `edf`.
export @(pure macro) auto tint(const auto tint, const edf base) = tint1(tint, base);

/// Construct 1-value tint of the given `hair_bsdf`.
export @(pure macro) auto tint(const auto tint, const hair_bsdf base) = tint1(tint, base);

/// Construct 2-value tint of the given `bsdf`.
export @(pure macro) auto tint(const auto reflection_tint, const auto transmission_tint, const bsdf base) = tint2(reflection_tint, transmission_tint, base);

@(pure macro) auto scatter_evaluate(const &tint1 this, const &scatter_evaluate_parameters params) {
  auto result(scatter_evaluate(visit &this.base, params));
  if (!result.is_black)
    result.f *= this.tint;
  return result;
}

@(pure macro) auto scatter_evaluate(const &tint2 this, const &scatter_evaluate_parameters params) {
  auto result(scatter_evaluate(visit &this.base, params));
  if (!result.is_black) {
    if (params.mode == scatter_reflect) {
      result.f *= this.reflection_tint;
    } else {
      result.f *= this.transmission_tint;
    }
  }
  return result;
}

@(pure macro) auto scatter_sample(const &tint1 this, const &scatter_sample_parameters params) {
  auto result(scatter_sample(visit &this.base, params));
  if ((result.mode != scatter_none) & bool(result.delta_f))
    *result.delta_f *= this.tint;
  return result;
}

@(pure macro) auto scatter_sample(const &tint2 this, const &scatter_sample_parameters params) {
  auto result(scatter_sample(visit &this.base, params));
  if ((result.mode != scatter_none) & bool(result.delta_f)) {
    if (params.mode == scatter_reflect) {
      *result.delta_f *= this.reflection_tint;
    } else {
      *result.delta_f *= this.transmission_tint;
    }
  }
  return result;
}
//--}

//--{ weighted_layer, color_weighted_layer
export struct weighted_layer: bsdf {
  /// The weight. 
  $(color | float) weight;

  /// The layer BSDF.
  bsdf layer = bsdf();

  /// The base BSDF.
  bsdf base = bsdf();

  /// The normal to use for the layer.
  float3 normal = $state.normal;

  /// The chance of sampling the layer BSDF.
  ///
  /// \note
  /// If the weight is a `float`, then the chance is the same
  /// as the weight. However, if the weight is a `color`, we
  /// have to average it down to a single probability.
  ///
  float chance = average(weight);

  finalize {
    weight = saturate(weight);
    chance = saturate(chance);
  }
};

@(pure macro) auto scatter_evaluate(const &weighted_layer this, inline const &scatter_evaluate_parameters params) {
  auto result0(scatter_evaluate(visit &this.base, params));
  preserve normal;
  normal = this.normal;
  auto result1(scatter_evaluate(visit &this.layer, params));
  return scatter_evaluate_result(f: lerp(result0.f, result1.f, this.weight), pdf: lerp(result0.pdf, result1.pdf, this.chance), is_black: result0.is_black & result1.is_black);
}

@(pure macro) auto scatter_sample(const &weighted_layer this, inline const &scatter_sample_parameters params) {
  if (monte_carlo::bool_sample(&xi.w, this.chance)) {
    preserve normal;
    normal = this.normal;
    return scatter_sample(visit &this.layer, params);
  } else {
    return scatter_sample(visit &this.base, params);
  }
}

/// The `color_weighted_layer` is also implemented by the `weighted_layer`.
export typedef weighted_layer color_weighted_layer;
//--}

export @(pure macro) int $scatter_evaluate(
  const &$material_instance instance,
  const &float3 wo,     ///< \param[in] The outgoing direction
  const &float3 wi,     ///< \param[in] The incoming direction
  const &float pdf_fwd, ///< \param[out] The PDF of sampling `wi` from `wo`
  const &float pdf_rev, ///< \param[out] The PDF of sampling `wo` from `wi`
  const &float f,       ///< \param[out] The scattering function
) {
  auto params = scatter_evaluate_parameters(
    wo0: normalize(*wo), // Guarantee normalized
    wi0: normalize(*wi), // Guarantee normalized
    thin_walled: instance.mat.thin_walled,
    normal: normalize(*instance.normal),
  );
  auto result = #typeof(instance.mat.backface) == #typeof(material_surface()) || !params.hit_backface //
                ? scatter_evaluate(&instance.mat.surface.scattering, &params)                         //
                : scatter_evaluate(&instance.mat.backface.scattering, &params);
  visit result in result {
    if (result.is_black) {
      *pdf_fwd = 0;
      *pdf_rev = 0;
      for (int i = 0; i < $WAVELENGTH_BASE_MAX; i++)
        f[i] = 0.0;
    } else {
      *pdf_fwd = result.pdf[0];
      *pdf_rev = result.pdf[1];
      if (#typeof(result.f) == float) {
        for (int i = 0; i < $WAVELENGTH_BASE_MAX; i++)
          f[i] = result.f;
      } else {
        #memcpy(f, &result.f, #sizeof(float) * $WAVELENGTH_BASE_MAX);
      }
    }
    return !result.is_black;
  }
}

export @(pure macro) int $scatter_sample(
  const &$material_instance instance,
  const &float4 xi,     ///< \param[in] The canonical random sample in `[0,1]^4`
  const &float3 wo,     ///< \param[in] The outgoing direction
  const &float3 wi,     ///< \param[out] The incoming direction
  const &float pdf_fwd, ///< \param[out] The PDF of sampling `wi` from `wo`
  const &float pdf_rev, ///< \param[out] The PDF of sampling `wo` from `wi`
  const &float f,       ///< \param[out] The scattering function
  const &int is_delta,  ///< \param[out] Is delta direction?
) {
  auto params = scatter_sample_parameters(
    xi: saturate(*xi),   // Guarantee clamped to [0,1]
    wo0: normalize(*wo), // Guarantee normalized
    thin_walled: instance.mat.thin_walled,
    normal: normalize(*instance.normal),
  );
  auto result = #typeof(instance.mat.backface) == #typeof(material_surface()) || !params.hit_backface //
                ? scatter_sample(&instance.mat.surface.scattering, &params)                           //
                : scatter_sample(&instance.mat.backface.scattering, &params);
  visit result in result {
    *wi = #select(params.hit_backface, -result.wi, +result.wi);
    if (result.mode == scatter_none || ((wo.z < 0) == (wi.z < 0)) != (result.mode == scatter_reflect)) {
      *pdf_fwd = 0.0;
      *pdf_rev = 0.0;
      for (int i = 0; i < $WAVELENGTH_BASE_MAX; i++)
        f[i] = 0.0;
      return false;
    }
    if ((*is_delta = bool(result.delta_f))) {
      *pdf_fwd = 1.0;
      *pdf_rev = 1.0;
      #memcpy(f, &*result.delta_f, #sizeof(float) * $WAVELENGTH_BASE_MAX);
      return true;
    } else {
      return $scatter_evaluate(instance, wo, wi, pdf_fwd, pdf_rev, f);
    }
  }
}
