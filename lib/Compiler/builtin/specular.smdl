#smdl

export @(pure macro) auto reflect(const float3 wi, const float3 wm) = 2 * #sum(wi * wm) * wm - wi;

export @(pure macro) auto refract(const float3 wi, const float3 wm, const float ior) {
  const auto cos_thetai(#sum(wi * wm));
  const auto cos2_thetai(#min(cos_thetai * cos_thetai, 1));
  const auto cos2_thetat(#max(1 - ior * ior * (1 - cos2_thetai), 0));
  const auto cos_thetat(#sqrt(cos2_thetat) * -#sign(cos_thetai));
  return -ior * wi + (ior * cos_thetai + cos_thetat) * wm;
}

export @(pure macro) auto refraction_half_vector(const float3 wo, const float3 wi, const float ior) = (vh := -ior * wo + wi) * #sign(vh.z);

export @(pure macro) auto refraction_half_vector_jacobian(const float3 wo, const float3 wi, const float ior) = #abs(#sum(wi * (vh := refraction_half_vector(wo, wi, ior)))) / ((vh2 := #sum(vh * vh)) * #sqrt(vh2));

export @(pure macro) auto schlick_F0(const auto ior) = #pow((ior - 1) / (ior + 1), 2);

export @(pure macro) auto schlick_fresnel(const auto cos_theta, const auto F0, const auto F90 = 1.0, const float exponent = 5) = F0 + (F90 - F0) * #pow(#max(1 - #abs(cos_theta), 0), exponent);

export @(pure) auto dielectric_fresnel(const float cos_thetai, const auto ior) {
  const auto cos2_thetat(1 - ior * ior * (1 - cos_thetai * cos_thetai));
  const auto cos_thetat(#sqrt(#max(cos2_thetat, 0)) * #sign(cos_thetai));
  const auto rs((ior * cos_thetai - cos_thetat) / (ior * cos_thetai + cos_thetat));
  const auto rp((cos_thetai - ior * cos_thetat) / (cos_thetai + ior * cos_thetat));
  return #min(0.5 * (rs * rs + rp * rp), 1.0);
}
